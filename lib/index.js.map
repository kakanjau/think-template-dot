{"version":3,"sources":["../src/index.js"],"names":["Base","think","adapter","DEF_CACHE_NAME","thinkCache","VIEW_CONTENT","VIEW_CACHE_NAME","global","dot","filter","default","startSymbol","endSymbol","loadfile","fnLoadfile","filePath","data","readFileSync","toString","ThinkTemplateDot","reconfig","def","templateFile","isString","getConfig","run","tVar","config","dotConfig","options","parseConfig","templateSettings","relative","root_path","prerender","cache_compile","doTCompiled","getContent","content","template"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;;;AAIA,IAAIA,OAAOC,MAAMC,OAAN,CAAc,UAAd,EAA0B,MAA1B,CAAX;AACA,IAAMC,iBAAiBC,WAAWC,YAAX,GAA0B,MAAjD;AACA,IAAMC,kBAAkBF,WAAWC,YAAnC;;AAEAE,OAAOC,GAAP,GAAaD,OAAOC,GAAP,IAAc,EAA3B;AACAD,OAAOC,GAAP,CAAWC,MAAX,GAAoBF,OAAOC,GAAP,CAAWC,MAAX,IAAqB,EAAzC;AACAF,OAAOC,GAAP,CAAWE,OAAX,GAAqBH,OAAOC,GAAP,CAAWE,OAAX,IAAsB;AACzCC,eAAa,IAD4B;AAEzCC,aAAW;AAF8B,CAA3C;AAIAL,OAAOC,GAAP,CAAWK,QAAX,GAAsBC,UAAtB;;AAEA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,MAAIC,OAAO,aAAGC,YAAH,CAAgBF,QAAhB,CAAX;AACA,MAAIC,IAAJ,EAAU,OAAOA,KAAKE,QAAL,EAAP;AACX;;IAEoBC,gB;;;;;;;;AACnB;;;;;mBAKOC,Q,qBAASC,G,EAAKC,Y,EAAc;AACjC,QAAGA,gBAAgBrB,MAAMsB,QAAN,CAAeD,YAAf,CAAnB,EAAiD;AAC/ClB,iBAAWD,cAAX,EAA2BmB,YAA3B,EAAyCD,GAAzC;AACAjB,iBAAWE,eAAX,EAA4BgB,eAAe,UAA3C,EAAuD,IAAvD;AACD,KAHD,MAGM;AACJlB,iBAAWD,cAAX,EAA2BkB,GAA3B;AACAjB,iBAAWE,eAAX,EAA4B,IAA5B;AACD;AACF,G;;AAED;;;;;mBAGOkB,S,sBAAUF,Y,EAAc;AAC7B,WAAOA,gBAAgBlB,WAAWD,cAAX,EAA2BmB,YAA3B,CAAvB;AACD,G;;6BAEKG,G;2FAAIH,Y,EAAcI,I,EAAMC,M;;;;;;;AACxBC,uB,GAAYD,UAAUA,OAAOzB,OAAjB,IAA4ByB,OAAOzB,OAAP,CAAeM,GAA3C,IAAkD,E;AAC9DqB,qB,GAAU,KAAKC,WAAL,CAAiB,cAAIC,gBAArB,EAAuCH,SAAvC,C;AAEVP,iB,GAAMjB,WAAWD,cAAX,EAA2B,eAAK6B,QAAL,CAAcL,OAAOM,SAArB,EAAgCX,YAAhC,CAA3B,C;;AACV,mBAAKY,SAAL,CAAeL,OAAf,iBAA6BR,GAA7B,EAAkCd,OAAOC,GAAzC;;mBAEGqB,QAAQM,a;;;;;AACLC,0B,GAAchC,WAAWE,eAAX,EAA4BgB,eAAe,UAA3C,C;;mBACdc,Y;;;;;+CACKA,aAAYV,IAAZ,C;;;;qBAGS,KAAKW,UAAL,CAAgBf,YAAhB,C;;;AAAhBgB,qB;AACAF,yB,GAAc,cAAIG,QAAJ,CAAaD,OAAb,EAAsBT,OAAtB,EAA+BR,GAA/B,C;;AAClB,kBAAGQ,QAAQM,aAAX,EAA0B;AACxB/B,2BAAWE,eAAX,EAA4BgB,eAAe,UAA3C,EAAuDc,WAAvD;AACD;;+CAEMA,YAAYV,IAAZ,C;;;;;;;;;;;;;;;;;;EA1CmC1B,I;;kBAAzBmB,gB;AA4CpB","file":"index.js","sourcesContent":["'use strict';\nimport path from \"path\";\nimport fs from \"fs\";\nimport doT from \"dot\";\n/**\n * dot template\n * @type {Class}\n */\nlet Base = think.adapter('template', 'base');\nconst DEF_CACHE_NAME = thinkCache.VIEW_CONTENT + '-def';\nconst VIEW_CACHE_NAME = thinkCache.VIEW_CONTENT;\n\nglobal.dot = global.dot || {};\nglobal.dot.filter = global.dot.filter || {};\nglobal.dot.default = global.dot.default || {\n  startSymbol: '{{',\n  endSymbol: '}}'\n};\nglobal.dot.loadfile = fnLoadfile;\n\nfunction fnLoadfile(filePath) {\n  var data = fs.readFileSync(filePath);\n  if (data) return data.toString();\n}\n\nexport default class ThinkTemplateDot extends Base {\n  /**\n   * 设置模板的编译时参数，根据模板文件名称(形参templateFile)进行配置。\n   * 如果templateFile有值，则配置该templateFile的def\n   * 如果templateFile为空，则配置全局的global.dot对象\n   */ \n  static reconfig(def, templateFile) {\n    if(templateFile && think.isString(templateFile)) {\n      thinkCache(DEF_CACHE_NAME, templateFile, def);\n      thinkCache(VIEW_CACHE_NAME, templateFile + '-compile', null);\n    }else {\n      thinkCache(DEF_CACHE_NAME, def);\n      thinkCache(VIEW_CACHE_NAME, null);\n    }\n  }\n\n  /**\n   * 获取指定模板的编译时参数\n   */\n  static getConfig(templateFile) {\n    return templateFile && thinkCache(DEF_CACHE_NAME, templateFile)\n  }\n\n  async run(templateFile, tVar, config) {\n    let dotConfig = config && config.adapter && config.adapter.dot || {};\n    let options = this.parseConfig(doT.templateSettings, dotConfig);\n\n    let def = thinkCache(DEF_CACHE_NAME, path.relative(config.root_path, templateFile));\n    this.prerender(options, doT, def, global.dot);\n    \n    if(options.cache_compile) {\n      let doTCompiled = thinkCache(VIEW_CACHE_NAME, templateFile + '-compile');\n      if (doTCompiled) {\n        return doTCompiled(tVar);\n      }\n    }\n    let content = await this.getContent(templateFile);\n    let doTCompiled = doT.template(content, options, def);\n    if(options.cache_compile) {\n      thinkCache(VIEW_CACHE_NAME, templateFile + '-compile', doTCompiled);\n    }\n\n    return doTCompiled(tVar);\n  }\n};"]}