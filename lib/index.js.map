{"version":3,"sources":["../src/index.js"],"names":["Base","think","adapter","global","dot","filter","default","startSymbol","endSymbol","loadfile","filePath","data","readFileSync","toString","run","templateFile","tVar","config","dotConfig","dotDef","options","parseConfig","templateSettings","prerender","getContent","content","doTCompiled","template"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;;;;AAKA,IAAIA,OAAOC,MAAMC,OAAN,CAAc,UAAd,EAA0B,MAA1B,CAAX;;AAGAC,OAAOC,GAAP,GAAaD,OAAOC,GAAP,IAAc,EAA3B;AACAD,OAAOC,GAAP,CAAWC,MAAX,GAAoBF,OAAOC,GAAP,CAAWC,MAAX,IAAqB,EAAzC;AACAF,OAAOC,GAAP,CAAWE,OAAX,GAAqBH,OAAOC,GAAP,CAAWE,OAAX,IAAsB;AACzCC,eAAa,IAD4B;AAEzCC,aAAW;AAF8B,CAA3C;;AAKA,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,MAAIC,OAAO,aAAGC,YAAH,CAAgBF,QAAhB,CAAX;AACA,MAAIC,IAAJ,EAAU,OAAOA,KAAKE,QAAL,EAAP;AACX;;;;;;;;;;AAGC;;;;;;mBAMMC,G;2FAAIC,Y,EAAcC,I,EAAMC,M;;;;;;AACxBC,uB,GAAYD,UAAUA,OAAOf,OAAjB,IAA4Be,OAAOf,OAAP,CAAeE,GAA3C,IAAkD,E;AAC9De,oB,GAAS;AACXV,0BAAUA;AADC,e;AAGTW,qB,GAAU,KAAKC,WAAL,CAAiB,cAAIC,gBAArB,EAAuCJ,SAAvC,C;;;AAEd,mBAAKK,SAAL,CAAeH,OAAf,iBAA6BD,MAA7B,EAAqChB,OAAOC,GAA5C;;;qBAEoB,KAAKoB,UAAL,CAAgBT,YAAhB,C;;;AAAhBU,qB;AACAC,yB,GAAc,cAAIC,QAAJ,CAAaF,OAAb,EAAsBL,OAAtB,EAA+BD,MAA/B,C;+CAEXO,YAAYV,IAAZ,C;;;;;;;;;;;;;;;;;;EAnBkBhB,I","file":"index.js","sourcesContent":["'use strict';\nimport path from \"path\";\nimport fs from \"fs\";\nimport doT from \"dot\";\n/**\n * dot template\n * @type {Class}\n */\n\nlet Base = think.adapter('template', 'base');\n\n\nglobal.dot = global.dot || {};\nglobal.dot.filter = global.dot.filter || {};\nglobal.dot.default = global.dot.default || {\n  startSymbol: '{{',\n  endSymbol: '}}'\n};\n\nfunction loadfile(filePath) {\n  var data = fs.readFileSync(filePath);\n  if (data) return data.toString();\n}\n\nexport default class extends Base {\n  /**\n   * run\n   * @param  {String} templateFile [template filepath]\n   * @param  {Object} tVar         [data]\n   * @return {String}              []\n   */\n  async run(templateFile, tVar, config) {\n    let dotConfig = config && config.adapter && config.adapter.dot || {};\n    let dotDef = {\n      loadfile: loadfile\n    };\n    let options = this.parseConfig(doT.templateSettings, dotConfig);\n\n    this.prerender(options, doT, dotDef, global.dot);\n\n    let content = await this.getContent(templateFile);\n    let doTCompiled = doT.template(content, options, dotDef);\n\n    return doTCompiled(tVar);\n  }\n}"]}