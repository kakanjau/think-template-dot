{"version":3,"sources":["../src/index.js"],"names":["Base","think","adapter","global","dot","filter","default","startSymbol","endSymbol","dotDef","loadfile","fnLoadfile","filePath","data","readFileSync","toString","ThinkTemplateDot","reconfig","def","thinkCache","VIEW_CONTENT","run","templateFile","tVar","config","dotConfig","options","parseConfig","templateSettings","prerender","cache_compile","doTCompiled","getContent","content","template"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;;;AAIA,IAAIA,OAAOC,MAAMC,OAAN,CAAc,UAAd,EAA0B,MAA1B,CAAX;;AAEAC,OAAOC,GAAP,GAAaD,OAAOC,GAAP,IAAc,EAA3B;AACAD,OAAOC,GAAP,CAAWC,MAAX,GAAoBF,OAAOC,GAAP,CAAWC,MAAX,IAAqB,EAAzC;AACAF,OAAOC,GAAP,CAAWE,OAAX,GAAqBH,OAAOC,GAAP,CAAWE,OAAX,IAAsB;AACzCC,eAAa,IAD4B;AAEzCC,aAAW;AAF8B,CAA3C;;AAKA,IAAIC,SAAS;AACXC,YAAUC;AADC,CAAb;;AAIA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,MAAIC,OAAO,aAAGC,YAAH,CAAgBF,QAAhB,CAAX;AACA,MAAIC,IAAJ,EAAU,OAAOA,KAAKE,QAAL,EAAP;AACX;;IAEoBC,gB;;;;;;;;AACnB;;;;;;;mBAOOC,Q,uBAAyC;AAAA,QAAhCC,GAAgC,uEAA1BT,MAA0B;AAAA,QAAlBL,GAAkB,uEAAZD,OAAOC,GAAK;;AAC9CK,aAASS,GAAT;AACAf,WAAOC,GAAP,GAAaA,GAAb;AACAK,WAAOC,QAAP,GAAkBD,OAAOC,QAAP,IAAmBC,UAArC;AACAQ,eAAWA,WAAWC,YAAtB,EAAoC,IAApC;AACD,G;;6BAEKC,G;2FAAIC,Y,EAAcC,I,EAAMC,M;;;;;;;AACxBC,uB,GAAYD,UAAUA,OAAOtB,OAAjB,IAA4BsB,OAAOtB,OAAP,CAAeE,GAA3C,IAAkD,E;AAE9DsB,qB,GAAU,KAAKC,WAAL,CAAiB,cAAIC,gBAArB,EAAuCH,SAAvC,C;;;AAEd,mBAAKI,SAAL,CAAeH,OAAf,iBAA6BjB,MAA7B,EAAqCN,OAAOC,GAA5C;;mBAEGsB,QAAQI,a;;;;;AACLC,0B,GAAcZ,WAAWA,WAAWC,YAAtB,EAAoCE,eAAe,UAAnD,C;;mBACdS,Y;;;;;+CACKA,aAAYR,IAAZ,C;;;;qBAGS,KAAKS,UAAL,CAAgBV,YAAhB,C;;;AAAhBW,qB;AACAF,yB,GAAc,cAAIG,QAAJ,CAAaD,OAAb,EAAsBP,OAAtB,EAA+BjB,MAA/B,C;;AAClB,kBAAGiB,QAAQI,aAAX,EAA0B;AACxBX,2BAAWA,WAAWC,YAAtB,EAAoCE,eAAe,UAAnD,EAA+DS,WAA/D;AACD;;+CAEMA,YAAYR,IAAZ,C;;;;;;;;;;;;;;;;;;EAlCmCvB,I;;kBAAzBgB,gB;AAoCpB","file":"index.js","sourcesContent":["'use strict';\nimport path from \"path\";\nimport fs from \"fs\";\nimport doT from \"dot\";\n/**\n * dot template\n * @type {Class}\n */\nlet Base = think.adapter('template', 'base');\n\nglobal.dot = global.dot || {};\nglobal.dot.filter = global.dot.filter || {};\nglobal.dot.default = global.dot.default || {\n  startSymbol: '{{',\n  endSymbol: '}}'\n};\n\nlet dotDef = {\n  loadfile: fnLoadfile\n};\n\nfunction fnLoadfile(filePath) {\n  var data = fs.readFileSync(filePath);\n  if (data) return data.toString();\n}\n\nexport default class ThinkTemplateDot extends Base {\n  /**\n   * run\n   * @param  {String} templateFile [template filepath]\n   * @param  {Object} tVar         [data]\n   * @return {String}              []\n   */\n\n  static reconfig(def = dotDef, dot = global.dot) {\n    dotDef = def;\n    global.dot = dot;\n    dotDef.loadfile = dotDef.loadfile || fnLoadfile;\n    thinkCache(thinkCache.VIEW_CONTENT, null);\n  }\n\n  async run(templateFile, tVar, config) {\n    let dotConfig = config && config.adapter && config.adapter.dot || {};\n\n    let options = this.parseConfig(doT.templateSettings, dotConfig);\n\n    this.prerender(options, doT, dotDef, global.dot);\n    \n    if(options.cache_compile) {\n      let doTCompiled = thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile');\n      if (doTCompiled) {\n        return doTCompiled(tVar);\n      }\n    }\n    let content = await this.getContent(templateFile);\n    let doTCompiled = doT.template(content, options, dotDef);\n    if(options.cache_compile) {\n      thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile', doTCompiled);\n    }\n\n    return doTCompiled(tVar);\n  }\n};"]}